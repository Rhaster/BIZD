-- Paweł Deptuła 155257
--Zad1
DECLARE
    numer_max NUMBER;
    nowy_numer NUMBER;
    nowa_nazwa departments.department_name%TYPE := 'EDUCATION';
BEGIN
    -- Znajdź maksymalny numer departamentu
    SELECT MAX(department_id)
    INTO numer_max
    FROM deptulapm.departments;

    -- Wyświetl maksymalny numer departamentu
    DBMS_OUTPUT.PUT_LINE('Maksymalny numer departamentu: ' || numer_max);

    -- Ustal nowy numer departamentu
    nowy_numer := numer_max + 10;

    -- Dodaj nowy departament
    INSERT INTO deptulapm.departments (department_id, department_name)
    VALUES (nowy_numer, nowa_nazwa);

    COMMIT;
END;

--Zad2
DECLARE
    numer_max NUMBER;
    nowy_numer NUMBER;
    nowa_nazwa departments.department_name%TYPE := 'EDUCATION';
BEGIN
    -- Znajdź maksymalny numer departamentu
    SELECT MAX(department_id)
    INTO numer_max
    FROM deptulapm.departments;

    -- Wyświetl maksymalny numer departamentu
    DBMS_OUTPUT.PUT_LINE('Maksymalny numer departamentu: ' || numer_max);

    -- Ustal nowy numer departamentu
    nowy_numer := numer_max + 10;

    -- Dodaj nowy departament
    INSERT INTO deptulapm.departments (department_id, department_name)
    VALUES (nowy_numer, nowa_nazwa);

    -- Zaktualizuj location_id dla dodanego departamentu
    UPDATE deptulapm.departments
    SET location_id = 3000
    WHERE department_id = nowy_numer;

    COMMIT;
END;

--Zad3
-- Tworzenie tabeli 'nowa' z jednym polem typu VARCHAR
CREATE TABLE nowa (
    liczba VARCHAR2(2)
);

DECLARE
    i NUMBER;
BEGIN
    -- Pętla od 1 do 10
    FOR i IN 1..10 LOOP
        -- Pominięcie liczb 4 i 6
        IF i NOT IN (4, 6) THEN
            -- Wstawianie liczby jako tekst do tabeli 'nowa'
            INSERT INTO nowa (liczba) VALUES (TO_CHAR(i));
        END IF;
    END LOOP;

    COMMIT;
END;

--Zad4
DECLARE
    country_record deptulapm.countries%ROWTYPE;
BEGIN
    -- Pobranie informacji o kraju o identyfikatorze 'CA'
    SELECT *
    INTO country_record
    FROM deptulapm.countries
    WHERE country_id = 'CA';

    -- Wyświetlenie nazwy kraju i region_id
    DBMS_OUTPUT.PUT_LINE('Nazwa kraju: ' || country_record.country_name);
    DBMS_OUTPUT.PUT_LINE('Region ID: ' || country_record.region_id);
END;

--Zad5
DECLARE
    -- Deklaracja kursora
    CURSOR emp_cursor IS
        SELECT salary, last_name
        FROM deptulapm.employees
        WHERE department_id = 50;

    -- Zmienne do przechowywania danych z kursora
    v_salary deptulapm.employees.salary%TYPE;
    v_last_name deptulapm.employees.last_name%TYPE;
BEGIN
    -- Otwarcie kursora i przetwarzanie danych
    FOR employee_record IN emp_cursor LOOP
        v_salary := employee_record.salary;
        v_last_name := employee_record.last_name;

        -- Sprawdzenie wysokości wynagrodzenia i wyświetlenie odpowiedniego komunikatu
        IF v_salary > 3100 THEN
            DBMS_OUTPUT.PUT_LINE(v_last_name || ': nie dawać podwyżki');
        ELSE
            DBMS_OUTPUT.PUT_LINE(v_last_name || ': dać podwyżkę');
        END IF;
    END LOOP;
END;

--Zad6
DECLARE
    -- Deklaracja kursora z trzema parametrami: min_salary, max_salary oraz znak imienia
    CURSOR emp_cursor (p_min_salary NUMBER, p_max_salary NUMBER, p_name_char CHAR) IS
        SELECT salary, first_name, last_name
        FROM deptulapm.employees
        WHERE salary BETWEEN p_min_salary AND p_max_salary
        AND UPPER(first_name) LIKE '%' || UPPER(p_name_char) || '%';

    -- Zmienne do przechowywania danych z kursora
    v_salary deptulapm.employees.salary%TYPE;
    v_first_name deptulapm.employees.first_name%TYPE;
    v_last_name deptulapm.employees.last_name%TYPE;
BEGIN
    -- Przetwarzanie pracowników z widełkami 1000 - 5000 oraz literą "A" w imieniu
    DBMS_OUTPUT.PUT_LINE('Pracownicy z widełkami 1000-5000 i literą "A" w imieniu:');
    FOR emp_record IN emp_cursor(1000, 5000, 'A') LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.first_name || ' ' || emp_record.last_name || ' - Zarobki: ' || emp_record.salary);
    END LOOP;

    -- Przetwarzanie pracowników z widełkami 5000 - 20000 oraz literą "U" w imieniu
    DBMS_OUTPUT.PUT_LINE('Pracownicy z widełkami 5000-20000 i literą "U" w imieniu:');
    FOR emp_record IN emp_cursor(5000, 20000, 'U') LOOP
        DBMS_OUTPUT.PUT_LINE(emp_record.first_name || ' ' || emp_record.last_name || ' - Zarobki: ' || emp_record.salary);
    END LOOP;
END;

--Zad9
--a)
CREATE OR REPLACE PROCEDURE add_job(p_job_id VARCHAR2, p_job_title VARCHAR2) IS
BEGIN
    INSERT INTO deptulapm.jobs_copy (job_id, job_title)
    VALUES (p_job_id, p_job_title);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END;

--b)
CREATE OR REPLACE PROCEDURE update_job_title(p_job_id VARCHAR2, p_new_job_title VARCHAR2) IS
BEGIN
    UPDATE deptulapm.jobs_copy
    SET job_title = p_new_job_title
    WHERE job_id = p_job_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;  -- Wywołanie wyjątku NO_DATA_FOUND, jeśli brak rekordów do aktualizacji
    END IF;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: Brak rekordów do aktualizacji.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił inny błąd: ' || SQLERRM);
END;

--c)
CREATE OR REPLACE PROCEDURE delete_job(p_job_id VARCHAR2) IS
BEGIN
    DELETE FROM deptulapm.jobs_copy
    WHERE job_id = p_job_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;  -- Wywołanie wyjątku NO_DATA_FOUND, jeśli brak rekordów do usunięcia
    END IF;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: Brak rekordów do usunięcia.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił inny błąd: ' || SQLERRM);
END;

--d)
CREATE OR REPLACE PROCEDURE get_employee_salary_name(p_employee_id NUMBER, p_salary OUT NUMBER, p_last_name OUT VARCHAR2) IS
BEGIN
    SELECT salary, last_name
    INTO p_salary, p_last_name
    FROM deptulapm.employees
    WHERE employee_id = p_employee_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Pracownik o podanym ID nie istnieje.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił inny błąd: ' || SQLERRM);
END;

--e)
-- sekwencja employees
CREATE SEQUENCE employees_seq
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE add_employee(
    p_first_name VARCHAR2,
    p_last_name VARCHAR2,
    p_email VARCHAR2,
    p_hire_date DATE,
    p_job_id VARCHAR2,
    p_salary NUMBER
) IS
    salary_too_high EXCEPTION;
BEGIN
    IF p_salary > 20000 THEN
        RAISE salary_too_high;
    END IF;

    INSERT INTO deptulapm.employees (employee_id, first_name, last_name, email, hire_date, job_id, salary)
    VALUES (employees_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_hire_date, p_job_id, p_salary);
    COMMIT;
EXCEPTION
    WHEN salary_too_high THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: Wynagrodzenie przekracza 20000.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił inny błąd: ' || SQLERRM);
END;